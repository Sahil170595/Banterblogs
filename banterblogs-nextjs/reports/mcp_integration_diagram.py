#!/usr/bin/env python
"""
Visual representation of Chimera Heart MCP integration flow
""" import sys
from pathlib import Path # Add project root to path
PROJECT_ROOT = Path(__file__).resolve().parents[1]
if str(PROJECT_ROOT) not in sys.path: sys.path.insert(0, str(PROJECT_ROOT)) def print_mcp_flow(): """Print visual flow of MCP integration""" print("=" * 80) print("CHIMERA HEART MCP INTEGRATION FLOW") print("=" * 80) print() print(" PERFORMANCE DIGEST AGENT") print(" Scans: reports/ (36+ artifacts)") print(" Scans: csv_data/ (baseline metrics)") print(" Detects: System specs (RTX 4080, 12GB VRAM)") print(" Analyzes: Regressions (10 found)") print(" Generates: digest_report.md") print() print(" MCP CLIENT (Running on localhost:4000)") print(" Endpoint: http://localhost:4000") print(" Protocol: JSON-RPC 2.0") print(" Client: Chimera Heart Agent") print(" Connects to: Your MCP Servers") print() print(" MCP SERVER CALLS BEING MADE:") print() print("1⃣ CLICKHOUSE MCP SERVER") print("") print(" POST http://localhost:4000 ") print(" { ") print(" \"jsonrpc\": \"2.0\", ") print(" \"method\": \"tools/call\", ") print(" \"params\": { ") print(" \"name\": \"clickhouse.execute\", ") print(" \"arguments\": { ") print(" \"query\": \"CREATE DATABASE...\" ") print(" } ") print(" } ") print(" } ") print("") print() print("2⃣ DATADOG MCP SERVER") print("") print(" POST http://localhost:4000 ") print(" { ") print(" \"jsonrpc\": \"2.0\", ") print(" \"method\": \"tools/call\", ") print(" \"params\": { ") print(" \"name\": \"datadog.emit_metric\", ") print(" \"arguments\": { ") print(" \"metric_name\": \"chimera-heart.kpis\", ") print(" \"value\": 36, ") print(" \"tags\": [\"env:dev\", \"agent:chimera\"] ") print(" } ") print(" } ") print(" } ") print("") print() print(" DATA BEING STORED:") print() print("CLICKHOUSE TABLES:") print(" performance_metrics") print(" timestamp: now()") print(" report_path: reports/mcp_integration_local4000.md") print(" backend: example_backend") print(" test_name: latency_test") print(" metric_name: latency_ms") print(" metric_value: 45.2") print(" unit: ms") print(" tags: {storage: mcp, agent: performance_digest}") print("") print(" digest_results") print(" timestamp: now()") print(" report_path: reports/mcp_integration_local4000.md") print(" generation_id: 2a72b7a9-a502-475c-ab4e-bd7f9c5308d1") print(" kpis: {overall_runs: 36, regressions: 10}") print(" top_suggestions:" ["Backend optimization", "..."]") print(" regression_count: 10") print(" artifacts_indexed:" ["report1", "report2"]") print() print("DATADOG METRICS SENT:") print(" chimera-heart.kpi.overall_runs: 36") print(" chimera-heart.regressions.total: 10") print(" chimera-heart.backend.example.metric: 45.2") print(" Alert: Performance Regression Alert") print() print(" CREDENTIALS BEING USED:") print(" Datadog API Key: 7fb9acea60a45dbc26527a0931ab9f80") print(" ClickHouse Cloud: m9drr7c16e.us-east1.gcp.clickhouse.cloud:8443") print(" Local ClickHouse: localhost:9000 (Docker)") print(" MCP Server: localhost:4000") print() print(" SUCCESS INDICATORS:") print(" Generation ID created: 2a72b7a9-a502-475c-ab4e-bd7f9c5308d1") print(" Digest written: mcp_integration_local4000.md") print(" MCP calls made to localhost:4000") print(" No connection errors") print(" Storage adapters initialized") print() print(" NEXT STEPS:") print("1. Check your MCP server logs on localhost:4000") print("2. Verify data in ClickHouse (cloud or local)") print("3. Check Datadog dashboard for emitted metrics") print("4. Review generated digest for insights") print() print("=" * 80) if __name__ == "__main__": print_mcp_flow()
